package nz.ac.vuw.ecs.rprofs.server;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import nz.ac.vuw.ecs.rprofs.client.data.LogRecord;
import nz.ac.vuw.ecs.rprofs.server.data.ClassRecord;
import nz.ac.vuw.ecs.rprofs.server.data.MethodRecord;

import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;

@SuppressWarnings("serial")
public class Logger extends HttpServlet {

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
	throws ServletException, IOException {

		int length = req.getContentLength();

		List<LogRecord> records = parse(length, req.getInputStream());
		Context.getInstance().storeLogs(records);
		
		resp.setStatus(201);
	}
	
	private static List<LogRecord> parse(int length, InputStream in) throws IOException {
		DataInputStream dis = new DataInputStream(in);
		
//		#define MAX_PARAMETERS 16
//		struct EventRecord {
//			long int thread;
//			char message[255];
//			int cnum;
//			int mnum;
//			int len;
//			long int params[MAX_PARAMETERS];
//		}
		final int MAX_PARAMETERS = 16;
		final int MESSAGE_LENGTH = 64;
		final int RECORD_LENGTH = 8 + 64 + 4 + 4 + 4 + MAX_PARAMETERS * 8;
		
		byte[] buffer = new byte[MESSAGE_LENGTH];
		
		List<LogRecord> records = new ArrayList<LogRecord>();
		for (int i = 0; i < length / RECORD_LENGTH; i++) {
			long thread = dis.readLong();
			dis.readFully(buffer);
			String event = parseString(buffer, 0);
			int cnum = dis.readInt();
			int mnum = dis.readInt();
			int len = dis.readInt();
			
			if (len > MAX_PARAMETERS) {
				System.err.printf("warning: %d is greater than MAX_PARAMETERS\n", len);
				len = MAX_PARAMETERS;
			}
			
			long[] args = new long[Math.min(len, MAX_PARAMETERS)];
			for (int j = 0; j < MAX_PARAMETERS; j++) {
				long arg = dis.readLong();
				if (j < len) {
					args[j] = arg;
				}
			}

			
			ClassRecord cls = Context.getInstance().getClass(cnum);
			MethodRecord mth = Context.getInstance().getMethod(cls, mnum);

			LogRecord record = new LogRecord();
			record.threadId = thread;
			record.event = event;
			record.className = (cls == null)?String.valueOf(cnum):cls.name;
			record.methodName = (mth == null)?String.valueOf(mnum):mth.name;
			record.classNumber = cnum;
			record.methodNumber = mnum;
			record.arguments = args;
			records.add(record);
			
			if ("main method entered".equals(event) && cls != null) {
				Context.getInstance().setMainMethod(cls.name);
			}
		}
		
		return records;
	}
	
	private static String parseString(byte[] buffer, int index) {
		for (int i = index; i < buffer.length; i++) {
			if (buffer[i] == 0) {
				return new String(buffer, index, i - index);
			}
		}
		return "";
	}
	
	public static void main(String[] args) throws IOException {
		parse(test.length, new ByteInputStream(test, test.length));
	}
	
	private static final byte[] test = new byte[] {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,
		0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x65, // 0
		0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x00, 0x00, // 1
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 2
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 3
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 4
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 5
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 6
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 7
		0x00, 0x00, 0x00, 0x24,
		0x00, 0x00, 0x00, 0x0d,
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, // 0
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 1
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 2
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 3
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 4
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 5
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 6
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 7
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 8
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 9
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 10
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 11
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 12
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 13
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 14
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 15
		
		
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,
		0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x24,
		0x00, 0x00, 0x00, 0x0d,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33,
		0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x22,
		0x00, 0x00, 0x00, 0x2f,
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
}
